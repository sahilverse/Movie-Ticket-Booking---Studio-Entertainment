generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
}

enum Role {
  USER
  ADMIN
}

model User {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  email               String    @unique
  password            String?
  image               String?
  bookings            Booking[]
  birthDate           DateTime?
  phone               String?
  gender              Gender?
  verificationCode    String?
  verificationExpires DateTime?
  emailVerified       DateTime?
  role                Role      @default(USER)
  accounts            Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([phone])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Movie {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  slug              String   @unique
  description       String?
  duration          String
  language          String[]
  genre             String[]
  cast              String[]
  director          String?
  rating            String?
  potraitImageUrl   String
  landscapeImageUrl String?
  releaseDate       DateTime
  shows             Show[]
  trailerUrl        String?
  isFeature         Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Screen {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  capacity Int
  shows    Show[]
  seats    Seat[]
}

model Show {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  movieId   String     @db.ObjectId
  movie     Movie      @relation(fields: [movieId], references: [id])
  screenId  String     @db.ObjectId
  screen    Screen     @relation(fields: [screenId], references: [id], onDelete: Cascade)
  startTime DateTime
  language  String
  endTime   DateTime?
  bookings  Booking[]
  ShowSeat  ShowSeat[]
}

model Seat {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  row      String
  col      Int
  type     SeatType
  price    Float
  screenId String     @db.ObjectId
  screen   Screen     @relation(fields: [screenId], references: [id])
  ShowSeat ShowSeat[]

  @@unique([screenId, row, col])
}

enum SeatStatus {
  AVAILABLE
  BOOKED
  SOLD
}

model ShowSeat {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  showId    String     @db.ObjectId
  show      Show       @relation(fields: [showId], references: [id], onDelete: Cascade)
  seatId    String     @db.ObjectId
  seat      Seat       @relation(fields: [seatId], references: [id], onDelete: Cascade)
  status    SeatStatus @default(AVAILABLE)
  bookingId String?    @db.ObjectId
  booking   Booking?   @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@unique([showId, seatId])
}

enum SeatType {
  NORMAL
  PREMIUM
}

model Booking {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  userId    String        @db.ObjectId
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  showId    String        @db.ObjectId
  show      Show          @relation(fields: [showId], references: [id], onDelete: Cascade)
  status    BookingStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  payment   Payment?
  paymentId String?       @db.ObjectId
  expiresAt DateTime
  amount    Float

  ShowSeat ShowSeat[]

  Ticket Ticket[]
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Ticket {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  bookingId String  @db.ObjectId
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  transactionCode String?
  transactionUuid String
  bookingId       String        @unique @db.ObjectId
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amount          Float
  status          PaymentStatus @default(PENDING)
  method          PaymentMethod
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  ESEWA
}
